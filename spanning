
class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    ArrayList<ArrayList<int[]>> adj = new ArrayList<>();
	    for(int i =0; i < V ; i++){
	        adj.add(new ArrayList<>());
	    }
	    for(int[] edge: edges){
	        adj.get(edge[0]).add(new int[]{edge[1],edge[2]});
	        adj.get(edge[1]).add(new int[]{edge[0],edge[2]});
	    }
	    PriorityQueue<int[]> pq = new PriorityQueue<>((x,y)->x[1]-y[1]);
	    boolean[] vis = new boolean[V];
	    // node wt
	    pq.offer(new int[]{0,0});
	    int mst = 0;
	    while(pq.size()>0){
	        int[] node = pq.poll();
	        int u = node[0];
	        int dis = node[1];
	        if(!vis[u]){
	            vis[u] = true;
	            mst+=dis;
	            for(int[] adjNode : adj.get(u)){
	                int v = adjNode[0];
	                int wt = adjNode[1];
	                if(!vis[v]){
	                    pq.offer(new int[]{v,wt});
	                }
	            }
	        }
	    }
	    return mst;
	}
}
